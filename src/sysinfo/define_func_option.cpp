#include "sysinfo/define_func_option.h"

//suggested dependency of each options
//std::multimap<const Option, const Option> option_dep = {
//    { Option::OP_HS_TOTAL_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_HS_SYS_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_HS_TEST_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_HS_CPU_REUSE_RATIO, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_HS_CPU_USAGE, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_HS_USED_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_VM_VCPU_VMTHREAD, Option::OP_VM_BASE },
//    { Option::OP_VM_VNODE, Option::OP_VM_VCPU_VMTHREAD },
//    { Option::OP_VM_VNODE, Option::OP_VM_BASE },
//    { Option::OP_VM_MEM_POLICY, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_VM_MEM_POLICY, Option::OP_VM_BASE },
//    { Option::OP_VM_CPU_BINDINFO, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_VCPU_VMTHREAD },
//    { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_BASE },
//    { Option::OP_VM_MEM_BINDINFO, Option::OP_HS_NODE_CORE_HPTHREAD },
//    { Option::OP_VM_MEM_BINDINFO, Option::OP_VM_VNODE },
//    { Option::OP_VM_MEM_BINDINFO, Option::OP_VM_BASE },
//    { Option::OP_VM_CPU_USAGE, Option::OP_VM_VCPU_VMTHREAD },
//    { Option::OP_VM_CPU_USAGE, Option::OP_VM_BASE },
//    { Option::OP_VM_MISS_RATE, Option::OP_VM_VCPU_VMTHREAD },
//    { Option::OP_VM_MISS_RATE, Option::OP_VM_BASE },
//    { Option::OP_VM_MEM_SAMPLE, Option::OP_VM_BASE },
//    { Option::OP_VM_USED_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD }
//    { Option::OP_VM_USED_MEM_SIZE, Option::OP_VM_BASE }
//};


////Functions to Options
//std::map<Func, std::set<Option> > func_to_option = {
//    //<<host static info>>
//    { Func::FC_HS_NODE_NUM_P_, 
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_NODE_IDS_P_,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_NODE_ID_P_CORE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_NODE_ID_P_HPTHREAD_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CORE_NUM_P_,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CORE_NUM_P_NODE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CORE_IDS_P_,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CORE_IDS_P_NODE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CORE_ID_P_HPTHREAD_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_NUM_P_,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_NUM_P_NODE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_NUM_P_CORE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_IDS_P_,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_IDS_P_NODE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_HPTHREAD_IDS_P_CORE_ID,
//        { Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_TOTAL_MEM_SIZE_P_,
//        { Option::OP_HS_TOTAL_MEM_SIZE } },
//    { Func::FC_HS_TOTAL_MEM_SIZE_P_NODE_ID,
//        { Option::OP_HS_TOTAL_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_SYS_NODE_DIST_P_,
//        { Option::OP_HS_SYS_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_SYS_NODE_DIST_P_NODE_ID_0_NODE_ID_1,
//        { Option::OP_HS_SYS_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_TEST_NODE_DIST_P_,
//        { Option::OP_HS_TEST_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_TEST_NODE_DIST_P_NODE_ID_0_NODE_ID_1,
//        { Option::OP_HS_TEST_NODE_DIST, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    //<<host dynamic info>>
//    { Func::FC_HS_CPU_REUSE_RATIO_P_,
//        { Option::OP_HS_CPU_REUSE_RATIO } },
//    { Func::FC_HS_CPU_REUSE_RATIO_P_NODE_ID,
//        { Option::OP_HS_CPU_REUSE_RATIO, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CPU_USAGE_P_,
//        { Option::OP_HS_CPU_USAGE } },
//    { Func::FC_HS_CPU_USAGE_P_NODE_ID,
//        { Option::OP_HS_CPU_USAGE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CPU_USAGE_P_CORE_ID,
//        { Option::OP_HS_CPU_USAGE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_CPU_USAGE_P_HPTHREAD_ID,
//        { Option::OP_HS_CPU_USAGE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_HS_USED_MEM_SIZE_P_,
//        { Option::OP_HS_USED_MEM_SIZE } },
//    { Func::FC_HS_USED_MEM_SIZE_P_NODE_ID,
//        { Option::OP_HS_USED_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    //<<VM static info>>
//    { Func::FC_VM_VM_ID_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_VMTHREAD_NUM_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_VMTHREAD_IDS_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_VCPU_NUM_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_VCPU_IDS_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_VCPU_IDS_P_VNODE_ID,
//        { Option::OP_VM_VCPU_VMTHREAD, Option::OP_VM_VNODE } },
//    { Func::FC_VM_VNODE_NUM_P_,
//        { Option::OP_VM_VNODE } },
//    { Func::FC_VM_VNODE_IDS_P_,
//        { Option::OP_VM_VNODE } },
//    { Func::FC_VM_TOTAL_MEM_SIZE_P_,
//        { Option::OP_VM_TOTAL_MEM_SIZE } },
//    { Func::FC_VM_MEM_POLICY_P_,
//        { Option::OP_VM_MEM_POLICY } },
//    { Func::FC_VM_BINDINFO_MEM_NODE_IDS_P_,
//        { Option::OP_VM_MEM_POLICY, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    //<<VM dynamic info>>
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_,
//        { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_VCPU_VMTHREAD, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_VCPU_ID,
//        { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_VCPU_VMTHREAD, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_VMTHREAD_ID,
//        { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_VCPU_VMTHREAD, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_VM_BINDINFO_MEM_NODE_ID_P_VNODE_ID,
//        { Option::OP_VM_CPU_BINDINFO, Option::OP_VM_VNODE, Option::OP_HS_NODE_CORE_HPTHREAD } },
//    { Func::FC_VM_CPU_USAGE_P_,
//        { Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_CPU_USAGE_P_VCPU_ID,
//        { Option::OP_VM_VCPU_VMTHREAD, Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_CPU_USAGE_P_VMTHREAD_ID,
//        { Option::OP_VM_VCPU_VMTHREAD, Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE,
//        { Option::OP_VM_MISS_RATE } },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE_VCPU_ID, 
//        { Option::OP_VM_MISS_RATE, Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE_VMTHREAD_ID, 
//        { Option::OP_VM_MISS_RATE, Option::OP_VM_VCPU_VMTHREAD } },
//    { Func::FC_VM_MEM_SAMPLE_P_,
//        { Option::OP_VM_MEM_SAMPLE } },
//    { Func::FC_VM_USED_MEM_SIZE_P_,
//        { Option::OP_VM_USED_MEM_SIZE } },
//    { Func::FC_VM_USED_MEM_SIZE_P_NODE_ID,
//        { Option::OP_VM_USED_MEM_SIZE, Option::OP_HS_NODE_CORE_HPTHREAD } }
//};
//
////Options
//std::map<const Option, const std::string> option_str = {
//    //<<host static info>>
//    { Option::OP_HS_NODE_CORE_HPTHREAD, "OP_HS_NODE_CORE_HPTHREAD" },
//    { Option::OP_HS_TOTAL_MEM_SIZE, "OP_HS_TOTAL_MEM_SIZE" },
//    { Option::OP_HS_SYS_NODE_DIST, "OP_HS_SYS_NODE_DIST" },
//    { Option::OP_HS_TEST_NODE_DIST, "OP_HS_TEST_NODE_DIST" },
//    //<<host dynamic info>>
//    { Option::OP_HS_CPU_REUSE_RATIO, "OP_HS_CPU_REUSE_RATIO" },
//    { Option::OP_HS_CPU_USAGE, "OP_HS_CPU_USAGE" },
//    { Option::OP_HS_USED_MEM_SIZE, "OP_HS_USED_MEM_SIZE" },
//    //<<vm static info>>
//    { Option::OP_VM_VCPU_VMTHREAD, "OP_VM_VCPU_VMTHREAD" },
//    { Option::OP_VM_VNODE, "OP_VM_VNODE" },
//    { Option::OP_VM_TOTAL_MEM_SIZE, "OP_VM_TOTAL_MEM_SIZE" },
//    { Option::OP_VM_MEM_POLICY, "OP_VM_MEM_POLICY" },
//    //<<vm dynamic info>>
//    { Option::OP_VM_CPU_BINDINFO, "OP_VM_CPU_BINDINFO" },
//    { Option::OP_VM_MEM_BINDINFO, "OP_VM_MEM_BINDINFO" },
//    { Option::OP_VM_CPU_USAGE, "OP_VM_CPU_USAGE" },
//    { Option::OP_VM_MISS_RATE, "OP_VM_MISS_RATE" },
//    { Option::OP_VM_MEM_SAMPLE, "OP_VM_MEM_SAMPLE" },
//    { Option::OP_VM_USED_MEM_SIZE, "OP_VM_USED_MEM_SIZE" }
//};
//
////Functions
//std::map<const Func, const std::string> func_str = {
//    //<<host static info>>
//    { Func::FC_HS_NODE_NUM_P_, "Vsf::node_num()" },
//    { Func::FC_HS_NODE_IDS_P_, "Vsf::node_ids()" },
//    { Func::FC_HS_NODE_ID_P_CORE_ID, "Vsf::node_id(core_id)" },
//    { Func::FC_HS_NODE_ID_P_HPTHREAD_ID, "Vsf::node_id(hpthread_id)" },
//    { Func::FC_HS_CORE_NUM_P_, "Vsf::core_num()" },
//    { Func::FC_HS_CORE_NUM_P_NODE_ID, "Vsf::core_num(node_id)" },
//    { Func::FC_HS_CORE_IDS_P_, "Vsf::core_ids()" },
//    { Func::FC_HS_CORE_IDS_P_NODE_ID, "Vsf::core_ids(node_id)" },
//    { Func::FC_HS_CORE_ID_P_HPTHREAD_ID, "Vsf::core_id(hpthread_id)" },
//    { Func::FC_HS_HPTHREAD_NUM_P_, "Vsf::hpthread_num()" },
//    { Func::FC_HS_HPTHREAD_NUM_P_NODE_ID, "Vsf::hpthread_num(node_id)" },
//    { Func::FC_HS_HPTHREAD_NUM_P_CORE_ID, "Vsf::hpthread_num(core_id)" },
//    { Func::FC_HS_HPTHREAD_IDS_P_, "Vsf::hpthread_ids()" },
//    { Func::FC_HS_HPTHREAD_IDS_P_NODE_ID, "Vsf::hpthread_ids(node_id)" },
//    { Func::FC_HS_HPTHREAD_IDS_P_CORE_ID, "Vsf::hpthread_ids(core_id)" },
//    { Func::FC_HS_TOTAL_MEM_SIZE_P_, "Vsf::total_mem_size()" },
//    { Func::FC_HS_TOTAL_MEM_SIZE_P_NODE_ID, "Vsf::total_mem_size(node_id)" },
//    { Func::FC_HS_SYS_NODE_DIST_P_, "Vsf::sys_node_dist()" },
//    { Func::FC_HS_SYS_NODE_DIST_P_NODE_ID_0_NODE_ID_1, "Vsf::sys_node_dist(node_id_0, node_id_1)" },
//    { Func::FC_HS_TEST_NODE_DIST_P_, "Vsf::test_node_dist()" },
//    { Func::FC_HS_TEST_NODE_DIST_P_NODE_ID_0_NODE_ID_1, "Vsf::test_node_dist(node_id_0, node_id_1)" },
//    //<<host dynamic info>>
//    { Func::FC_HS_CPU_REUSE_RATIO_P_, "Vsf::cpu_reuse_ratio()" },
//    { Func::FC_HS_CPU_REUSE_RATIO_P_NODE_ID, "Vsf::cpu_reuse_ratio(node_id)" },
//    { Func::FC_HS_CPU_USAGE_P_, "Vsf::cpu_usage()" },
//    { Func::FC_HS_CPU_USAGE_P_NODE_ID, "Vsf::cpu_usage(node_id)" },
//    { Func::FC_HS_CPU_USAGE_P_CORE_ID, "Vsf::cpu_usage(core_id)" },
//    { Func::FC_HS_CPU_USAGE_P_HPTHREAD_ID, "Vsf::cpu_usage(hpthread_id)" },
//    { Func::FC_HS_USED_MEM_SIZE_P_, "Vsf::used_mem_size()" },
//    { Func::FC_HS_USED_MEM_SIZE_P_NODE_ID, "Vsf::used_mem_size(node_id)" },
//    //<<VM static info>>
//    { Func::FC_VM_VM_ID_P_, "Vm::vm_id()" },
//    { Func::FC_VM_VMTHREAD_NUM_P_, "Vm::vmthread_num()" },
//    { Func::FC_VM_VMTHREAD_IDS_P_, "Vm::vmthread_ids()" },
//    { Func::FC_VM_VCPU_NUM_P_, "Vm::vcpu_num()" },
//    { Func::FC_VM_VCPU_IDS_P_, "Vm::vcpu_ids()" },
//    { Func::FC_VM_VCPU_IDS_P_VNODE_ID, "Vm::vcpu_ids(vnode_id)" },
//    { Func::FC_VM_VNODE_NUM_P_, "Vm::vnode_num()" },
//    { Func::FC_VM_VNODE_IDS_P_, "Vm::vnode_ids()" },
//    { Func::FC_VM_TOTAL_MEM_SIZE_P_, "Vm::total_mem_size()" },
//    { Func::FC_VM_MEM_POLICY_P_, "Vm::mem_policy()" },
//    { Func::FC_VM_BINDINFO_MEM_NODE_IDS_P_, "Vm::bindinfo_mem_node_ids()" },
//    //<<VM dynamic info>>
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_, "Vm::bindinfo_hpthread_ids()" },
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_VCPU_ID, "Vm::bindinfo_hpthread_ids(vcpu_id)" },
//    { Func::FC_VM_BINDINFO_HPTHREAD_IDS_P_VMTHREAD_ID, "Vm::bindinfo_hpthread_ids(vmthread_id)" },
//    { Func::FC_VM_BINDINFO_MEM_NODE_ID_P_VNODE_ID, "Vm::bindinfo_mem_node_id(vnode_id)" },
//    { Func::FC_VM_CPU_USAGE_P_, "Vm::cpu_usage()" },
//    { Func::FC_VM_CPU_USAGE_P_VCPU_ID, "Vm::cpu_usage(vcpu_id)" },
//    { Func::FC_VM_CPU_USAGE_P_VMTHREAD_ID, "Vm::cpu_usage(vmthread_id)" },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE, "Vm::miss_rate(miss_rate_type)" },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE_VCPU_ID, "Vm::miss_rate(miss_rate_type)" },
//    { Func::FC_VM_MISS_RATE_P_MISS_RATE_TYPE_VMTHREAD_ID, "Vm::miss_rate(miss_rate_type)" },
//    { Func::FC_VM_MEM_SAMPLE_P_, "Vm::mem_sample()" },
//    { Func::FC_VM_USED_MEM_SIZE_P_, "Vm::used_mem_size()" },
//    { Func::FC_VM_USED_MEM_SIZE_P_NODE_ID, "Vm::used_mem_size(node_id)" }
//};

